[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "youte: Collecting YouTube video metadata and comments",
    "section": "",
    "text": "youte is a helper library that interacts with YouTube Data API. Effectively, it makes working with YouTube API and collecting YouTube metadata and comments easy and intuitive. youte is primarily run as a command-line tool.\nyoute is still early in its development, so its functionalities remain quite limited. However, the tool is actively worked on and new capabilities are being added at the present. Keep an eye out for new releases on our GitHub page:\n\n\nAn Application Programming Interface or API is a set of communication protocols that help two programs or applications talk to each other. According to this protocol, you send a request to the API, and the API returns a response code to tell you whether your request was valid, and a response body that contains the data requested.\nAs an API, YouTube Data API allows you to get information of a wide range of resources. A YouTube resource is an entity that makes up the YouTube experience, including video, channel, playlist, comment, and search results. Each resource has a unique ID given by YouTube. These IDs will come in handy when you query data from YouTube API.\nThe API also allows you to update, delete or create YouTube resources, although as a data collection tool, youte currently does not support these operations.\n\n\n\nWe mentioned that youte is a command-line tool. So what is a command line? A command line, or the shell, is an interface that takes textual, keyboard commands and passes them to your computer for execution.\nA variety of shells are used across operating systems. Some common ones are listed below:\n\nWindows: Command Prompt (cmd), Powershell, Git Bash\nLinux & Mac OS: Bash, Zsh\n\nIf you need a quick introduction of how the shell works, this guide is a useful resource.\nCode display convention: Shell commands in this tutorial are displayed as codes with a dollar ($) sign in front of them. When copying the code to your own terminal, make sure to omit the dollar sign."
  },
  {
    "objectID": "index.html#installing-youte",
    "href": "index.html#installing-youte",
    "title": "youte: Collecting YouTube video metadata and comments",
    "section": "Installing youte",
    "text": "Installing youte\nTo install youte, run:\n$ python -m pip install youte\nyoute can work with Python 3.8 and above, so make sure you check your Python version before installing.\n\nIssues installing youte in Anaconda\nIf you use Anaconda’s distribution of Python, there might be issues installing and using youte. The below solutions have been tried and shown to work:\n\nIf you install youte in the base environment (i.e. not in a virtual environment), run youte in Anaconda Prompt as opposed to other shells.\nYou can install youte in a virtual environment and run it in that virtual environment."
  },
  {
    "objectID": "index.html#set-up",
    "href": "index.html#set-up",
    "title": "youte: Collecting YouTube video metadata and comments",
    "section": "Set up",
    "text": "Set up\nTo get started, you will need a YouTube API key. Obtaining an API key is simple and straightforward, but you will need a Google account to do so. Instructions for getting an API key are described here.\nOnce you have your API key, configure your key with youte by running the command:\n$ youte config add-key\nThis will display an interactive prompt where you enter your API key and give it a name. The name will be used to specify the API key, and it can be anything you choose. This will save you the trouble of having to enter the API key every time you query data from YouTube: all you need is the key’s name.\nYou’re also asked if you want to set a key as the default key. If there is a default key, it will be used automatically every time you run a query.\nAll API keys have to be added to youte before they can be used. config add-key stores your API key in a config file which youte will refer to when running queries. The config file also stores metadata such as your quota usage and time of its most recent use.\nTo see a list of all stored keys, run:\n$ youte config list-keys\nTo manually set a key as a default, run:\n$ youte config set-default <NAME-OF-KEY>\nHere you specify the name of the API key you want to set as default.\nTo remove an API key from youte, run:\n$ youte config remove <NAME-OF-KEY>"
  },
  {
    "objectID": "index.html#running-a-search",
    "href": "index.html#running-a-search",
    "title": "youte: Collecting YouTube video metadata and comments",
    "section": "Running a search",
    "text": "Running a search\nNow, onto the exciting part. Let’s run a search!\nSimilarly to doing a YouTube search, youte search allows you to do get a list of videos matching keywords and other specified criteria. youte does not return audiovisual content, just the metadata such as video titles and descriptions.\nHere is the format of youte search command. Note that all shell commands must be inputted in one line. The backlashes (\\) are used to enter a new line without breaking the command and help with readability.\n$ youte search <QUERY> <OUTPUT> \\\n    --from <YYYY-MM-DD> \\\n    --to <YYYY-MM-DD> \\\n    --name <name-of-api-key> \\\n    --order=<date|rating|relevance|title> \\\n    --safe-search=<none|moderate|strict>\nThe <QUERY> and <OUTPUT> are must-have arguments and have to follow the order specified in the command.\n\nQUERY: the search term to look for in YouTube video titles and descriptions.\nOUTPUT: name of the file to store raw JSON responses from the API. The file must end in .json or .jsonl.\n\nBesides the above, there are several optional arguments that you can pass to further refine the search:\n\n--from, --to: specify date range of the search results returned. The date format has to follow ISO format (YYYY-MM-DD). Note that the date range here is inclusive.\n--name: name of the API key configured with youte. This is optional if you already have a default API key set up.\n--order: specify how you want the data to be sorted. The default (date) will sort the results by date of upload. Other options include rating, relevance, and title.\n--safe-search: include or exclude restricted content. The default (none) will include all publicly available content. Other options include moderate, and strict.\n\nAs an example, let’s search for videos matching “offgrid living” in August 2022.\nyoute search \"offgrid living\" results.json --from 2022-08-01 --to 2022-08-31\nOf course, you might want to get just the most relevant results first:\nyoute search \"offgrid living\" results.json --from 2022-08-01 --to 2022-08-31 --order=relevance\nOr only include moderated content:\nyoute search \"offgrid living\" results.json --from 2022-08-01 --to 2022-08-31 --safe-search=moderate\n\nSaving search progress\nAs will be described below, often there is a limit to how much data you get from YouTube API per day. Searching, in particular, is very “expensive” in terms of API usage. Therefore, you can choose to save the progress of a search so that if you exit the program prematurely, either by accident or on purpose, you can resume the search to avoid wasting valuable quota units.\nSpecifically, when you exit the program in the middle of a search, a prompt will ask if you want to save its progress. If yes, progress of the search is saved in a database, whose name matches exactly the name of the OUTPUT file that you specified. If you rerun the same search in the same directory, you can choose to resume the progress from that database. This database will be deleted once all search results have been returned.\n$ youte search \"offgrid living\" --from 2022-08-08 --output search_offgrid.json  \n\n# exit program\nDo you want to save your current progress? [y/N]: # y  \n\n# resume search\n$ youte search \"offgrid living\" --from 2022-08-08 --output search_offgrid.json  \n\nGetting API key from config file.  \n\n        A history file '.youte.history/search_offgrid.db' is detected in your current directory.\n        Do you want to resume progress from this history file?\n        If you are at all unsure, say No. [y/N]:"
  },
  {
    "objectID": "index.html#hydrating-videos-and-channels",
    "href": "index.html#hydrating-videos-and-channels",
    "title": "youte: Collecting YouTube video metadata and comments",
    "section": "Hydrating videos and channels",
    "text": "Hydrating videos and channels\nNow, if you look at the search results returned from youte search, you’ll see that they contain only a few fields of information. For example, video statistics are not provided, and video descriptions are truncated.\nyoute search only returns some data, so if you want to get full data on a set of videos or channels you might need to use hydrate.\nyoute hydrate [OPTIONS] <OUTPUT> <ITEMS>...\n\nOUTPUT: name of the file to store raw JSON responses from the API. The file must end in .json or .jsonl.\nITEMS: one or more video IDs separated by a space.\n\nyoute hydrate command takes as input a list of video or channel IDs and retrieves information on those. As mentioned above, each YouTube resource has a unique identifier. You can get the ID of a resource in the browser or within the data returned by YouTube Data API. For example, the ID of a YouTube video can be seen in the video’s URL:\nhttps://www.youtube.com/watch?v=5MXTcO1veRQ\nNow let’s hydrate this video. By default, youte hydrate takes the IDs as video IDs and return video information. So you can hydrate one video easily with:\n$ youte hydrate video.json 5MXTcO1veRQ\nYou can also hydrate multiple videos:\n$ youte hydrate videos.json 5MXTcO1veRQ cbAj3biUeDI dTI3I9ZFzTI\n\nHydrating channels\nIf you want to hydrate a list of channel IDs, pass the --channel flag.\nHydrate 1 channel ID:\n$ youte hydrate channel.json --channel UC3mORGO2XYSn3Y_BUPuazeQ\nHydrate multiple channel IDs\n$ youte hydrate channels.json --channel UCC-jcZTFL1r17E-bEC7VYYA UC3mORGO2XYSn3Y_BUPuazeQ\n\nWorking with channel IDs\nSimilar to video IDs, channel IDs can be found in the channels’ URLs (https://www.youtube.com/channel/UC3mORGO2XYSn3Y_BUPuazeQ).\nHowever, most often channel IDs will be more difficult to find because YouTube channels can have custom names and URLs (e.g. https://www.youtube.com/c/AmbitionMusic), or older channels might have a different URL (e.g. https://www.youtube.com/user/QueenAnime141). These custom names won’t be able to hydrate.\nTherefore, the best way to get channel IDs is in the search results from youte search.\n\n\n\nUsing file containing IDs\nInstead of listing the IDs in the shell, you can also specify a file containing the IDs by passing the -f flag followed by the file’s path. The file should contain just the IDs, each on a new line, and of the same resource type.\n$ youte hydrate videos_json -f video_ids.csv"
  },
  {
    "objectID": "index.html#getting-comments",
    "href": "index.html#getting-comments",
    "title": "youte: Collecting YouTube video metadata and comments",
    "section": "Getting comments",
    "text": "Getting comments\n\nGetting comments on video\nThe youte list-comments command lets you retrieve comments left on a video or to a comment thread. First, let’s get comments on a video.\n$ youte list-comments -v <OUTPUT> <ITEMS>...\nThe format of list-comments is the same as hydrate. You specify a name for the output file, followed by one or multiple video IDs. Remember to pass the -v flag to indicate that the IDs are video IDs from which to get comments.\n$ youte list-comments -v comments.json dTI3I9ZFzTI\nOne potential issue you might run into when running this command is if the video has comments disabled. In this case, the program will show a warning and skip to other IDs if there is any.\n\n\nGetting replies to comment threads\nGetting comments on a video retrieves only the top level comments (or threads), but not their replies. You can get the replies to a thread by running list-comments with the thread ID, and passing -t to indicate the ID belongs to a thread, not a video.\nIn a browser, the thread ID can be seen if you hover your mouse over a comment’s timestamp. Or you can get the thread IDs from the data returned by list-comments.\nhttps://www.youtube.com/watch?v=A-mO7rbYtgk&lc=UgwTqVJTgz1gZl6X57Z4AaABAg\n$ youte list-comments -t <OUTPUT> <ITEMS>...\nThis command will return an empty JSON if there are no replies.\n\nUsing text file containing IDs\nSimilarly to hydrate, you can also use IDs from a text file instead of passing them to the shell, by using the -f flag.\n$ youte list-comments -v comments_many.json -f video_ids.csv"
  },
  {
    "objectID": "index.html#tidying-data",
    "href": "index.html#tidying-data",
    "title": "youte: Collecting YouTube video metadata and comments",
    "section": "Tidying data",
    "text": "Tidying data\n\nJSON format\nAll data returned from youte search, youte hydrate, and youte list-comments are in JSON format.\nWhat is JSON?\nJSON is the most common way for exchanging text data. Today it is the universal standard of data exchange because of its conciseness, versatility, and platform independence.\nHere is an example of a JSON object.\n{\n  \"kind\": \"youtube#searchResult\",\n  \"etag\": \"B_TxCObncAju-vhnFwKefxRoNRI\",\n  \"id\": {\n    \"kind\": \"youtube#video\",\n    \"videoId\": \"SR2Mf27YweM\"\n  },\n  \"snippet\": {\n    \"publishedAt\": \"2022-08-31T00:43:25Z\",\n    \"channelId\": \"UCnSc_XzYmAMMSJX4shj7ovw\",\n    \"title\": \"30/08/22 :: 9 HOURS STUDY WITH ME [PART-2/2] :: CA: UPSC: PCS: IIT: NEET: SSC: OTHER EXAMS\",\n    \"description\": \"Why is this channel ? As we know that to get good marks in any exam ,we have to study hard and for which consistency is ...\",\n    \"thumbnails\": {\n      \"default\": {\n        \"url\": \"https://i.ytimg.com/vi/SR2Mf27YweM/default.jpg\",\n        \"width\": 120,\n        \"height\": 90\n      },\n      \"medium\": {\n        \"url\": \"https://i.ytimg.com/vi/SR2Mf27YweM/mqdefault.jpg\",\n        \"width\": 320,\n        \"height\": 180\n      },\n      \"high\": {\n        \"url\": \"https://i.ytimg.com/vi/SR2Mf27YweM/hqdefault.jpg\",\n        \"width\": 480,\n        \"height\": 360\n      }\n    },\n    \"channelTitle\": \"BE CONSISTENT\",\n    \"liveBroadcastContent\": \"none\",\n    \"publishTime\": \"2022-08-31T00:43:25Z\"\n  }\n}\nEverything inside a curly braces belongs to an object. An object is basically a thing or an entity. Within that object, you can have object properties or attributes, represented by key-value pairs. As shown in the example above, you can also have objects nested within objects.\nAs you can see, the JSON format is great for data exchange, but not for data analysis, for which you’ll probably need something closer to a table or spreadsheet. This is where youte tidy might come in handy, as it processes and transforms raw JSON files into a relational, SQLite database.\nA relational database contains tables of columns and rows. Each row represents an entity (object) and each column an attribute of that entity. So it looks very similar to your spreadsheet or CSV file. SQLite is a light-weight database engine that stores an entire database within a .db file, making it easy to transfer and work with small-scale databases. Interacting with databases requires SQL, although there are tools and libraries that will minimise the amount of SQL you’ll need to read data.\nNow, let’s see what youte tidy does. It takes in a single JSON file as input, and a .db file as output.\nyoute tidy <INPUT-JSON> <OUTPUT-DB>\nThe JSON file should contain one type of resource (e.g. video, channel, comment). And the output file must have a .db ending.\nyoute tidy raw.json cleaned.db\n\n\nWorking with databases in R and Python\n\nR\nThere are many tools to work with SQlite files, in R and Python. In R, the RSQLite package offers a nice and easy way to interact and read data from .db files.\nlibrary(DBI)     # for createing database connection\nlibrary(RSQLite)\n\ncon <- DBI::dbConnect(RSQLite::SQLite(), \"comments.db\")\ndbListTables(con)             # list all tables in the database\ndata <- dbReadTable(con, \"comments\")  # get table `comments` to a dataframe\n\n\nPython\nThe pandas library offers some nice functions to connect with and read data from databases. pandas’ read_sql_query lets you query a database into a DataFrame.\nimport pandas\nimport sqlite3   # for creating connection with SQLite databases\n\ncon = sqlite3.connect(\"cleaned.db\")   # connect to cleaned.db\ndata = pandas.read_sql_query(\"SELECT * FROM comments\", con=con)  # read all data from table \"comments\" to a pandas DataFrame"
  },
  {
    "objectID": "index.html#youtube-api-quota-system",
    "href": "index.html#youtube-api-quota-system",
    "title": "youte: Collecting YouTube video metadata and comments",
    "section": "YouTube API Quota system",
    "text": "YouTube API Quota system\nMost often, there is a limit to how many requests you can make to YouTube API per day. YouTube API uses a quota system in which each request costs a number of units depending on the operation requested.\nFor example:\n\nsearching costs 100 units per request\nhydrating videos, channels, and comments each costs 1 unit per request\n\nFree accounts get an API quota cap of 10,000 units per project per day, which resets at midnight Pacific Time. Hence the default maximum quota value is set to be 10,000 in youte.\n\nyoute’s handling of quota usage\nAt present, you can only check your quota usage on the Quotas page in the API Console. It is not possible to monitor quota usage via metadata returned in the API responses.\nTherefore, youte manually monitors quota by keeping counts of requests made and logging their quota usage to the config file. If the maximum quota has been reached, youte handles it by putting the program to sleep until quota reset time (midnight Pacific) before re-running the collector. This is a makeshift approach and does not guarantee perfectly accurate data, especially when you try to collect data on multiple computers using the same API key.\n\n\nSaving search progress\nAs you have seen above, searching is very “expensive” in terms of quota usage. Therefore, you can select to save the progress of a search so that if you exit the program prematurely, either by accident or on purpose, you can resume the search from where it stopped to avoid wasting valuable quota units.\nWhen you exit the program in the middle of a search (i.e. by pressing Ctrl+C), you will get a prompt asking to save progress.\nIf you select Yes, search progress is saved in a SQLite database in a hidden .youte.history folder inside your current directory. The name of the database is what is passed as the OUTPUT file with the .json extension removed. If you rerun the same search in the same directory, you can choose to resume the progress from that database. This database will be deleted once all search results have been returned.\n$ youte search \"offgrid living\" search.json\nWhen you press Ctrl+C to exit the program midway through and then press y after the prompt you will see:\nDo you want to save your current progress? [y/N]:\n\nProgress saved at /home/boyd/Documents/demo/.youte.history/search.db\nTo resume the search, type the same command in the same directory:\n$ youte search \"offgrid living\" search.json\nA history file '.youte.history/search.db' is detected in your current directory.\nDo you want to resume progress from this history file?\nIf you are at all unsure, say No. [y/N]:"
  },
  {
    "objectID": "index.html#feedback-is-welcome",
    "href": "index.html#feedback-is-welcome",
    "title": "youte: Collecting YouTube video metadata and comments",
    "section": "Feedback is welcome!",
    "text": "Feedback is welcome!\nyoute is still in its infancy, and we are working to improve and expand its capabilities. Extra documentation on youte can be found on our GitHub’s repository. Let us know your feedback or suggestions by creating GitHub issues or emailing us at digitalobservatory@qut.edu.au."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]