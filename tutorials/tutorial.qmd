---
title: "Collecting YouTube data with `youte`"
format:
  revealjs:
    code-overflow: wrap
    code-line-numbers: false
    css: styling.css
    self-contained: true
    # include-after-body: logo-footer.html
editor: visual
---

## {.logo .no-footer}

<div class="row">
<div class="column">
<img src="assets/ado-logo.png" style="width:100%">
  
</div>

<div class="column">

<img src="assets/atap.png" style="width:100%">
  
</div>
</div>

## {.none}

<div class="center">

We acknowledge the Traditional Custodians of country throughout Australia and their connections to land, sea and community. We pay our respect to their Elders past and present and extend that respect to all Aboriginal and Torres Strait Islander peoples today.

</div>

##  {.none}

<img src="assets/yt_logo_rgb_light.png" height="100"/>

<br>

-   The second most visited website in the world
-   81% of Internet users have used YouTube
-   Over 500 hours of videos are uploaded every minute

::: footnotes
-   https://www.semrush.com/website/top/
-   https://blog.hootsuite.com/youtube-stats-marketers/
:::

## Introducing `youte`

A helper library that interacts with YouTube Data API.

Helps make collecting data from YouTube easy and intuitive.

**What you can do with `youte`**:

-   Search for public videos
-   Get public video and channel metadata and comments
-   Tidy YouTube data

::: notes
-   helper library

-   interact with API

-   command line tool

-   get and tidy YouTube data
:::

## API: A recap

Application Programming Interface (API) is a set of protocols that help two programs/application "talk" to each other.

![](assets/api-request.svg)

## YouTube Data API

An API that allows you to work with YouTube data.

Retrieves information of YouTube **resources** (entities that make up the YouTube experience):

-   videos
-   channels
-   comments
-   playlists

Uses a **quota system**: there is a limit of how much data you can retrieve in a day.

## Installing `youte`

``` shell
 pip install youte
```

## Set up your `youte` profile

To run `youte`, you need to first configure and store your API key.

Open the Terminal and type the following command to get the interactive prompt.

``` shell
 youte config add-key
```

::: notes
-   config saves key + quota usage

-   spares the trouble of entering it every time you run a query

-   what's a shell?

-   add-key: API key name is just a name you choose

-   set default

-   list-keys
:::

## youte search {.smaller}

``` shell
 youte search <QUERY> <OUTPUT> \
      --from <YYYY-MM-DD> \
      --to <YYYY-MM-DD> \
      --name <name-of-api-key> \ 
      --order=<date|rating|relevance|title> \
      --safe-search=<none|moderate|strict>
```

-   `QUERY`: the search term to look for in YouTube video titles and descriptions

-   `OUTPUT`: name of the file to store raw JSON responses from the API

-   `--from`, `--to`: specify date range of the search results returned

-   `--name`: name of the API key configured with youte

-   `--order`: sort type

-   `--safe-search`: include or exclude restricted content

::: notes
-   Arguments vs optional params

-   \--name is not needed if there's a default key

-   File structure in shell (pwd, ls, cd)

-   JSON
:::

## Example searches {.smaller}

Search for all videos containing *study with me* within last months:

``` shell
 youte search "study with me" search.json --from 2022-08-01 --to 2022-08-31
```

Return the most relevant videos:

``` shell
 youte search "study with me" search.json --order=relevance
```

Only include moderated content:

``` shell
 youte search "study with me" search.json --safe-search=moderate
```

::: notes
You can tweak these search options to get the results you want. Here are a few examples of how to use the options.
:::

##  {.smaller}

Example JSON response:

``` json
{
  "kind": "youtube#searchResult",
  "etag": "B_TxCObncAju-vhnFwKefxRoNRI",
  "id": {
    "kind": "youtube#video",
    "videoId": "SR2Mf27YweM"
  },
  "snippet": {
    "publishedAt": "2022-08-31T00:43:25Z",
    "channelId": "UCnSc_XzYmAMMSJX4shj7ovw",
    "title": "30/08/22 :: 9 HOURS STUDY WITH ME [PART-2/2] :: CA: UPSC: PCS: IIT: NEET: SSC: OTHER EXAMS",
    "description": "Why is this channel ? As we know that to get good marks in any exam ,we have to study hard and for which consistency is ...",
    "thumbnails": {
      "default": {
        "url": "https://i.ytimg.com/vi/SR2Mf27YweM/default.jpg",
        "width": 120,
        "height": 90
      },
      "medium": {
        "url": "https://i.ytimg.com/vi/SR2Mf27YweM/mqdefault.jpg",
        "width": 320,
        "height": 180
      },
      "high": {
        "url": "https://i.ytimg.com/vi/SR2Mf27YweM/hqdefault.jpg",
        "width": 480,
        "height": 360
      }
    },
    "channelTitle": "BE CONSISTENT",
    "liveBroadcastContent": "none",
    "publishTime": "2022-08-31T00:43:25Z"
  }
}
```

## Hydrate video information {.smaller}

https://www.youtube.com/watch?v=**ZEbCz7B2-Eg**

``` shell
 youte hydrate <OUTPUT> [ITEMS]...
```

-   `OUTPUT`: name of file storing raw JSON data from the API
-   `[ITEMS]`: one or many video IDs

## Using text file containing IDs

``` shell
 youte hydrate <OUTPUT> -f item_ids.csv
```

-   Use IDs in a text file instead of entering them directly into the shell
-   The text file contains a list of IDs, each on a new line, with no heading

## Get comments on a video

``` shell
 youte list-comments -v <OUTPUT> [ITEMS]...
```

-   `OUTPUT`: name of file storing raw JSON data from the API
-   `-v` or `--by-video`: specify that comments on videos are to be retrieved
-   `[ITEMS]`: one or many video IDs

## Get replies to a comment thread {.smaller}

``` shell
 youte list-comments -t <OUTPUT> [ITEMS]...
```

-   `-t` or `--by-thread`: specify that replies to a comment thread are to be retrieved

\**Comment thread*: a top-level comment with replies

## YouTube quota system

-   Each request costs a number of *units*

-   **10,000** units per day, reset at midnight Pacific Time

-   Each endpoint has a different unit cost:

    -   Search: 100 units

    -   Video, channel, comment: 1 unit

## Tidy JSON responses {.smaller}

``` shell
 youte tidy <INPUT> <OUTPUT>
```

-   `INPUT`: raw JSON file to be tidied

-   `OUTPUT`: SQLite database to store tidy data

For example:

``` shell
 youte tidy raw_data.json cleaned_data.db
```

::: notes
`youte` also provides a command to transform raw JSON data to tabular format in a relational SQLite database.

Run the `youte tidy` command with INPUT being the JSON file, and OUTPUT being a SQLite database file.
:::

## Relational databases

-   Tables (schemas) of columns and rows
-   Each row represents an entity/record
-   Each column represents an attribute/property

### SQLite

-   Light-weight database engine
-   Stores an entire database in a `.db` file
-   You use SQL to work with databases

## Working with databases in R {.smaller}

::: panel-tabset
### Code

``` r
library(DBI)
library(RSQLite)

con <- DBI::dbConnect(RSQLite::SQLite(), "comments.db")
data <- DBI::dbReadTable(con, "comments")

head(data)
```

### Results

```{r}
if (!require("pacman")) install.packages("pacman")

pacman::p_load(DBI, RSQLite, magrittr, dplyr, knitr)

con <- DBI::dbConnect(RSQLite::SQLite(),
                  "comments.db")
data <- DBI::dbReadTable(con, "comments")
kable(head(data, 5), format="html")
```
:::

## Additional help

- https://github.com/QUT-Digital-Observatory/youte

- Joint office hours: https://research.qut.edu.au/digitalobservatory/office-hours/

::: notes
For further help, refer to `youte` documentation on our Github page. `youte` is still early in its development so any feedback is welcome. And we aim to expand on its functionalities in the future.
:::
