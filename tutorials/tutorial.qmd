---
title: "Collecting YouTube data with `youte`"
format:
  revealjs:
    code-overflow: wrap
    code-line-numbers: false
    css: styling.css
editor: visual
---

##  {.none}

<img src="assets/yt_logo_rgb_light.png" height="100"/> <br>

-   The second most visited website in the world
-   81% of Internet users have used YouTube
-   Over 500 hours of videos are uploaded every minute

::: footnotes
-   https://www.semrush.com/website/top/
-   https://blog.hootsuite.com/youtube-stats-marketers/
:::

## Introducing `youte`

A helper library that interacts with YouTube Data API.

Helps make collecting data from YouTube easy and intuitive.

**What you can do with `youte`**:

-   Search for public videos
-   Get public video and channel metadata and comments
-   Tidy YouTube data

::: notes
Hello and welcome everyone to this workshop on collecting and analysing YouTube comments. In this first half of the workshop, I'll be showing you how to collect YouTube data using a commandline tool called youte. Then Sam will walk you through analysing YouTube comments collected by youte with discursis.

First of all, what is youte? In short, youte is a utility that you can run in your terminal that collects data from YouTube API. There are a variety of data that you can get with `youte`, like video and channel data such as titles, descriptions, and view statistics. You can also get comments left on a video or replies to a top level comment.
:::

## API: A recap

Application Programming Interface (API) is a set of protocols that help two programs/application "talk" to each other.

![](assets/api-request.svg)

## YouTube Data API

An API that allows you to work with YouTube data.

Retrieves information of YouTube **resources** (entities that make up the YouTube experience):

-   videos
-   channels
-   comments
-   playlists

Uses a **quota system**: there is a limit of how much data you can retrieve in a day.

## Installing `youte`

``` shell
 pip install youte
```

::: notes
To install `youte`, simply run `pip install youte` in your terminal.
:::

## Set up your `youte` profile

To run `youte`, you need to first configure and store your API key.

Open the Terminal and type the following command to get the interactive prompt.

``` shell
 youte config add-key
```

::: notes
Before running any query to get data, you need to configure your API key in `youte`. The `youte config add-key` command lets you store your API key in a config file, which youte then uses to store key metadata such as how many quota units you've used and so on. So if you open your terminal and type youte config add-key, you'll get an interactive prompt that guides you through the process. Here's a demo of how it's done.

When prompted, enter your API key as provided by Google. Then give your API key a name. This is used to easily identify your API key, and can be anything you choose.

You can also set this API key as your default key, in which case you don't need to specify an API key name every time you run `youte`.
:::

## Running a YouTube search {.smaller}

![](assets/youtube_search.png){height="600"}

::: notes
Now that's all set up. Let's start with the exciting bit, doing a YouTube search!

Say you want to do a search for videos matching the keyword "study with me", to see what their titles and descriptions are and how many views they get.
:::

## youte search {.smaller}

``` shell
 youte search <QUERY> <OUTPUT> \
      --from <YYYY-MM-DD> \
      --to <YYYY-MM-DD> \
      --name <name-of-api-key> \ 
      --order=<date|rating|relevance|title> \
      --safe-search=<none|moderate|strict>
```

-   `QUERY`: the search term to look for in YouTube video titles and descriptions

-   `OUTPUT`: name of the file to store raw JSON responses from the API

-   `--from`, `--to`: specify date range of the search results returned

-   `--name`: name of the API key configured with youte

-   `--order`: sort type

-   `--safe-search`: include or exclude restricted content

::: notes
The `youte search` command works similarly to doing a YouTube search on a web browser, except that you do it through the command line. It allows you to do a YouTube search matching certain keywords. Here is a format of the command. The pointy brackets indicate your own input.

First you pass the query or keyword to search for, followed by the name of the output file to store the result data. You can also search for videos after or before a certain date by passing the --from and --to options.

The --name argument specifies which API key to use. If you've already set a default API key and want to use it, you don't need to specify this argument.

You can also tell the API to return the results in a certain order, specified by the `--order` argument. The default setting is sorting the results by the videos' upload times.

Finally, you can tell the API to include or exclude restricted content. The default setting is to return all public content. Here is an example of how a search is run.
:::

## Example searches {.smaller}

Search for all videos containing *study with me* within last months:

``` shell
 youte search "study with me" search.json --from 2022-08-01 --to 2022-08-31
```

Return the most relevant videos:

``` shell
 youte search "study with me" search.json --order=relevance
```

Only include moderated content:

``` shell
 youte search "study with me" search.json --safe-search=moderate
```

::: notes
You can tweak these search options to get the results you want. Here are a few examples of how to use the options.
:::

##  {.smaller}

Example JSON response:

``` json
{
  "kind": "youtube#searchResult",
  "etag": "B_TxCObncAju-vhnFwKefxRoNRI",
  "id": {
    "kind": "youtube#video",
    "videoId": "SR2Mf27YweM"
  },
  "snippet": {
    "publishedAt": "2022-08-31T00:43:25Z",
    "channelId": "UCnSc_XzYmAMMSJX4shj7ovw",
    "title": "30/08/22 :: 9 HOURS STUDY WITH ME [PART-2/2] :: CA: UPSC: PCS: IIT: NEET: SSC: OTHER EXAMS",
    "description": "Why is this channel ? As we know that to get good marks in any exam ,we have to study hard and for which consistency is ...",
    "thumbnails": {
      "default": {
        "url": "https://i.ytimg.com/vi/SR2Mf27YweM/default.jpg",
        "width": 120,
        "height": 90
      },
      "medium": {
        "url": "https://i.ytimg.com/vi/SR2Mf27YweM/mqdefault.jpg",
        "width": 320,
        "height": 180
      },
      "high": {
        "url": "https://i.ytimg.com/vi/SR2Mf27YweM/hqdefault.jpg",
        "width": 480,
        "height": 360
      }
    },
    "channelTitle": "BE CONSISTENT",
    "liveBroadcastContent": "none",
    "publishTime": "2022-08-31T00:43:25Z"
  }
}
```

::: notes
All responses returned from YouTube API will be in JSON format. Here is a sample JSON response from `youte search`. `youte` also provides a function to transform raw JSON data to tidy or clean tabular format, which I'll talk about in a bit.
:::

## Hydrate video information {.smaller}

https://www.youtube.com/watch?v=**ZEbCz7B2-Eg**

``` shell
 youte hydrate <OUTPUT> [ITEMS]...
```

-   `OUTPUT`: name of file storing raw JSON data from the API
-   `[ITEMS]`: one or many video IDs

::: notes
The hydrate command is useful if you have a list of video IDs you want to get full data of. A common use of this command is after you run `youte search` to get a list of results first.

`youte search` only returns some data, so if you want to get full data on a set of videos or channels you might need to use `hydrate`.

Put your video IDs to a text or csv file, with each ID on a new line. And run `youte hydrate`.
:::

## Using text file containing IDs

``` shell
 youte hydrate <OUTPUT> -f item_ids.csv
```

-   Use IDs in a text file instead of entering them directly into the shell
-   The text file contains a list of IDs, each on a new line, with no heading

## Get comments on a video {.smaller}

![](assets/youtube_comments.png)

## Get comments on a video

``` shell
 youte list-comments -v <OUTPUT> [ITEMS]...
```

-   `OUTPUT`: name of file storing raw JSON data from the API
-   `-v` or `--by-video`: specify that comments on videos are to be retrieved
-   `[ITEMS]`: one or many video IDs

::: notes
To get comments on a video, simply put the video ID in a text file and run the list-comments command. Specify the -v flag to let `youte` know you want comments on video.
:::

## Get replies to a comment thread {.smaller}

![](assets/youtube_replies.png){align="center"}

## Get replies to a comment thread {.smaller}

``` shell
 youte list-comments -t OUTPUT [ITEMS]...
```

-   `-t` or `--by-thread`: specify that replies to a comment thread are to be retrieved

\**Comment thread*: a top-level comment with replies

## YouTube quota system

-   Each request costs a number of *units*

-   **10,000** units per day, reset at midnight Pacific Time

-   Each endpoint has a different unit cost:

    -   Search: 100 units

    -   Video, channel, comment: 1 unit

## Tidy JSON responses {.smaller}

``` shell
 youte tidy <INPUT> <OUTPUT>
```

-   `INPUT`: raw JSON file to be tidied

-   `OUTPUT`: SQLite database to store tidy data

For example:

``` shell
 youte tidy raw_data.json cleaned_data.db
```

::: notes
`youte` also provides a command to transform raw JSON data to tabular format in a relational SQLite database.

Run the `youte tidy` command with INPUT being the JSON file, and OUTPUT being a SQLite database file.
:::

## Relational databases

-   Tables (schemas) of columns and rows
-   Each row represents an entity/record
-   Each column represents an attribute/property

### SQLite

-   Light-weight database engine
-   Stores an entire database in a `.db` file
-   You use SQL to work with databases

## Working with databases in R {.smaller}

::: panel-tabset
### Code

``` r
library(DBI)
library(RSQLite)

con <- DBI::dbConnect(RSQLite::SQLite(), "comments.db")
data <- DBI::dbReadTable(con, "comments")

head(data)
```

### Results

```{r}
if (!require("pacman")) install.packages("pacman")

pacman::p_load(DBI, RSQLite, magrittr, dplyr, knitr)

con <- DBI::dbConnect(RSQLite::SQLite(),
                  "comments.db")
data <- DBI::dbReadTable(con, "comments")
kable(head(data, 5), format="html")
```
:::

## Additional help

-   https://github.com/QUT-Digital-Observatory/youte

::: notes
For further help, refer to `youte` documentation on our Github page. `youte` is still early in its development so any feedback is welcome. And we aim to expand on its functionalities in the future.
:::
